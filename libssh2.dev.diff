diff --git a/win32/GNUmakefile b/win32/GNUmakefile
index eef8b19..2655ec8 100644
--- a/win32/GNUmakefile
+++ b/win32/GNUmakefile
@@ -123,7 +123,6 @@ LIBEXT	= lib
 #RANLIB	=
 LIBPATH	+= -lr "$(METROWERKS)/MSL" -lr "$(METROWERKS)/Win32-x86 Support"
 LDLIBS	+= -lMSL_Runtime_x86.lib -lMSL_C_x86.lib -lMSL_Extras_x86.lib
-LDLIBS	+= -lkernel32.lib -luser32.lib -lwsock32.lib
 RCFLAGS	=
 CFLAGS	+= -nostdinc -gccinc -msgstyle gcc -inline off -opt nointrinsics -proc 586
 CFLAGS	+= -ir "$(METROWERKS)/MSL" -ir "$(METROWERKS)/Win32-x86 Support"
@@ -136,8 +135,6 @@ AR	= $(CROSSPREFIX)ar
 ARFLAGS	= -cq
 LIBEXT	= a
 RANLIB	= $(CROSSPREFIX)ranlib
-#LDLIBS	+= -lwsock32
-LDLIBS	+= -lws2_32
 RCFLAGS	= -I $(PROOT)/include -O coff
 CFLAGS	+= -fno-builtin
 CFLAGS	+= -fno-strict-aliasing
@@ -189,6 +186,12 @@ else
 	LDLIBS += $(patsubst %,$(OPENSSL_LIBPATH)/lib%.$(LIBEXT), $(OPENSSL_LIBS_DYN))
 endif
 endif
+ifeq ($(CC),mwcc)
+LDLIBS	+= -lkernel32.lib -luser32.lib -lwsock32.lib
+else
+#LDLIBS	+= -lwsock32
+LDLIBS	+= -lws2_32
+endif
 
 ifdef WITH_ZLIB
 	CFLAGS += -DLIBSSH2_HAVE_ZLIB
diff --git a/src/openssl.c b/src/openssl.c
index bb10752..d39d448 100644
--- a/src/openssl.c
+++ b/src/openssl.c
@@ -177,7 +177,8 @@ _libssh2_cipher_init(_libssh2_cipher_ctx * h,
                      _libssh2_cipher_type(algo),
                      unsigned char *iv, unsigned char *secret, int encrypt)
 {
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
+    !defined(LIBRESSL_VERSION_NUMBER)
     *h = EVP_CIPHER_CTX_new();
     return !EVP_CipherInit(*h, algo(), secret, iv, encrypt);
 #else
@@ -196,7 +197,8 @@ _libssh2_cipher_crypt(_libssh2_cipher_ctx * ctx,
     (void) algo;
     (void) encrypt;
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
+    !defined(LIBRESSL_VERSION_NUMBER)
     ret = EVP_Cipher(*ctx, buf, block, blocksize);
 #else
     ret = EVP_Cipher(ctx, buf, block, blocksize);
@@ -249,7 +251,8 @@ aes_ctr_init(EVP_CIPHER_CTX *ctx, const unsigned char *key,
     if (c == NULL)
         return 0;
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
+    !defined(LIBRESSL_VERSION_NUMBER)
     c->aes_ctx = EVP_CIPHER_CTX_new();
 #else
     c->aes_ctx = malloc(sizeof(EVP_CIPHER_CTX));
@@ -260,7 +263,8 @@ aes_ctr_init(EVP_CIPHER_CTX *ctx, const unsigned char *key,
     }
 
     if (EVP_EncryptInit(c->aes_ctx, aes_cipher, key, NULL) != 1) {
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
+    !defined(LIBRESSL_VERSION_NUMBER)
         EVP_CIPHER_CTX_free(c->aes_ctx);
 #else
         free(c->aes_ctx);
@@ -329,7 +333,8 @@ aes_ctr_cleanup(EVP_CIPHER_CTX *ctx) /* cleanup ctx */
     }
 
     if (c->aes_ctx != NULL) {
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
+    !defined(LIBRESSL_VERSION_NUMBER)
         EVP_CIPHER_CTX_free(c->aes_ctx);
 #else
         _libssh2_cipher_dtor(c->aes_ctx);
@@ -345,7 +350,8 @@ aes_ctr_cleanup(EVP_CIPHER_CTX *ctx) /* cleanup ctx */
 static const EVP_CIPHER *
 make_ctr_evp (size_t keylen, EVP_CIPHER *aes_ctr_cipher, int type)
 {
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
+    !defined(LIBRESSL_VERSION_NUMBER)
     aes_ctr_cipher = EVP_CIPHER_meth_new(type, 16, keylen);
     if (aes_ctr_cipher) {
         EVP_CIPHER_meth_set_iv_length(aes_ctr_cipher, 16);
@@ -369,7 +375,8 @@ make_ctr_evp (size_t keylen, EVP_CIPHER *aes_ctr_cipher, int type)
 const EVP_CIPHER *
 _libssh2_EVP_aes_128_ctr(void)
 {
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
+    !defined(LIBRESSL_VERSION_NUMBER)
     static EVP_CIPHER * aes_ctr_cipher;
     return !aes_ctr_cipher?
         make_ctr_evp (16, aes_ctr_cipher, NID_aes_128_ctr) : aes_ctr_cipher;
@@ -383,7 +390,8 @@ _libssh2_EVP_aes_128_ctr(void)
 const EVP_CIPHER *
 _libssh2_EVP_aes_192_ctr(void)
 {
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
+    !defined(LIBRESSL_VERSION_NUMBER)
     static EVP_CIPHER * aes_ctr_cipher;
     return !aes_ctr_cipher?
         make_ctr_evp (24, aes_ctr_cipher, NID_aes_192_ctr) : aes_ctr_cipher;
@@ -397,7 +405,8 @@ _libssh2_EVP_aes_192_ctr(void)
 const EVP_CIPHER *
 _libssh2_EVP_aes_256_ctr(void)
 {
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
+    !defined(LIBRESSL_VERSION_NUMBER)
     static EVP_CIPHER * aes_ctr_cipher;
     return !aes_ctr_cipher?
         make_ctr_evp (32, aes_ctr_cipher, NID_aes_256_ctr) : aes_ctr_cipher;
@@ -619,7 +628,8 @@ _libssh2_dsa_sha1_sign(libssh2_dsa_ctx * dsactx,
 int
 _libssh2_sha1_init(libssh2_sha1_ctx *ctx)
 {
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
+    !defined(LIBRESSL_VERSION_NUMBER)
     *ctx = EVP_MD_CTX_new();
 
     if (*ctx == NULL)
@@ -642,7 +652,8 @@ int
 _libssh2_sha1(const unsigned char *message, unsigned long len,
               unsigned char *out)
 {
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
+    !defined(LIBRESSL_VERSION_NUMBER)
     EVP_MD_CTX * ctx = EVP_MD_CTX_new();
 
     if (ctx == NULL)
@@ -671,7 +682,8 @@ _libssh2_sha1(const unsigned char *message, unsigned long len,
 int
 _libssh2_sha256_init(libssh2_sha256_ctx *ctx)
 {
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
+    !defined(LIBRESSL_VERSION_NUMBER)
     *ctx = EVP_MD_CTX_new();
 
     if (*ctx == NULL)
@@ -694,7 +706,8 @@ int
 _libssh2_sha256(const unsigned char *message, unsigned long len,
                 unsigned char *out)
 {
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
+    !defined(LIBRESSL_VERSION_NUMBER)
     EVP_MD_CTX * ctx = EVP_MD_CTX_new();
 
     if (ctx == NULL)
@@ -723,7 +736,8 @@ _libssh2_sha256(const unsigned char *message, unsigned long len,
 int
 _libssh2_md5_init(libssh2_md5_ctx *ctx)
 {
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
+    !defined(LIBRESSL_VERSION_NUMBER)
     *ctx = EVP_MD_CTX_new();
 
     if (*ctx == NULL)
diff --git a/src/openssl.h b/src/openssl.h
index 4b2e3d3..88fc29c 100644
--- a/src/openssl.h
+++ b/src/openssl.h
@@ -116,7 +116,8 @@
 
 #define libssh2_prepare_iovec(vec, len)  /* Empty. */
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
+    !defined(LIBRESSL_VERSION_NUMBER)
 #define libssh2_sha1_ctx EVP_MD_CTX *
 #else
 #define libssh2_sha1_ctx EVP_MD_CTX
@@ -125,7 +126,8 @@
 /* returns 0 in case of failure */
 int _libssh2_sha1_init(libssh2_sha1_ctx *ctx);
 #define libssh2_sha1_init(x) _libssh2_sha1_init(x)
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
+    !defined(LIBRESSL_VERSION_NUMBER)
 #define libssh2_sha1_update(ctx, data, len) EVP_DigestUpdate(ctx, data, len)
 #define libssh2_sha1_final(ctx, out) do { \
                                          EVP_DigestFinal(ctx, out, NULL); \
@@ -139,7 +141,8 @@ int _libssh2_sha1(const unsigned char *message, unsigned long len,
                   unsigned char *out);
 #define libssh2_sha1(x,y,z) _libssh2_sha1(x,y,z)
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
+    !defined(LIBRESSL_VERSION_NUMBER)
 #define libssh2_sha256_ctx EVP_MD_CTX *
 #else
 #define libssh2_sha256_ctx EVP_MD_CTX
@@ -148,7 +151,8 @@ int _libssh2_sha1(const unsigned char *message, unsigned long len,
 /* returns 0 in case of failure */
 int _libssh2_sha256_init(libssh2_sha256_ctx *ctx);
 #define libssh2_sha256_init(x) _libssh2_sha256_init(x)
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
+    !defined(LIBRESSL_VERSION_NUMBER)
 #define libssh2_sha256_update(ctx, data, len) EVP_DigestUpdate(ctx, data, len)
 #define libssh2_sha256_final(ctx, out) do { \
                                            EVP_DigestFinal(ctx, out, NULL); \
@@ -162,7 +166,8 @@ int _libssh2_sha256(const unsigned char *message, unsigned long len,
                   unsigned char *out);
 #define libssh2_sha256(x,y,z) _libssh2_sha256(x,y,z)
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
+    !defined(LIBRESSL_VERSION_NUMBER)
 #define libssh2_md5_ctx EVP_MD_CTX *
 #else
 #define libssh2_md5_ctx EVP_MD_CTX
@@ -171,7 +176,8 @@ int _libssh2_sha256(const unsigned char *message, unsigned long len,
 /* returns 0 in case of failure */
 int _libssh2_md5_init(libssh2_md5_ctx *ctx);
 #define libssh2_md5_init(x) _libssh2_md5_init(x)
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
+    !defined(LIBRESSL_VERSION_NUMBER)
 #define libssh2_md5_update(ctx, data, len) EVP_DigestUpdate(ctx, data, len)
 #define libssh2_md5_final(ctx, out) do { \
                                         EVP_DigestFinal(ctx, out, NULL); \
@@ -182,7 +188,8 @@ int _libssh2_md5_init(libssh2_md5_ctx *ctx);
 #define libssh2_md5_final(ctx, out) EVP_DigestFinal(&(ctx), out, NULL)
 #endif
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
+    !defined(LIBRESSL_VERSION_NUMBER)
 #define libssh2_hmac_ctx HMAC_CTX *
 #define libssh2_hmac_ctx_init(ctx) ctx = HMAC_CTX_new()
 #define libssh2_hmac_sha1_init(ctx, key, keylen) \
@@ -238,7 +245,8 @@ int _libssh2_md5_init(libssh2_md5_ctx *ctx);
 #define _libssh2_dsa_free(dsactx) DSA_free(dsactx)
 
 #define _libssh2_cipher_type(name) const EVP_CIPHER *(*name)(void)
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
+    !defined(LIBRESSL_VERSION_NUMBER)
 #define _libssh2_cipher_ctx EVP_CIPHER_CTX *
 #else
 #define _libssh2_cipher_ctx EVP_CIPHER_CTX
@@ -261,7 +269,8 @@ int _libssh2_md5_init(libssh2_md5_ctx *ctx);
 #define _libssh2_cipher_cast5 EVP_cast5_cbc
 #define _libssh2_cipher_3des EVP_des_ede3_cbc
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
+    !defined(LIBRESSL_VERSION_NUMBER)
 #define _libssh2_cipher_dtor(ctx) EVP_CIPHER_CTX_reset(*(ctx))
 #else
 #define _libssh2_cipher_dtor(ctx) EVP_CIPHER_CTX_cleanup(ctx)
